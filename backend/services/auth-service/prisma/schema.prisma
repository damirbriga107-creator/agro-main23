generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User @map("users") {
  id              String    @id @default(cuid())
  email           String    @unique
  firstName       String
  lastName        String
  phone           String?
  passwordHash    String
  role            UserRole  @default(FARMER)
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Profile
  avatar      String?
  bio         String?
  location    String?
  currency    String @default("USD")
  language    String @default("en")
  timezone    String @default("UTC")

  // Notification preferences
  notifyEmail Boolean @default(true)
  notifySms   Boolean @default(false)
  notifyPush  Boolean @default(true)

  // Relations
  farms            FarmMember[]
  transactions     Transaction[]
  budgets          Budget[]
  refreshTokens    RefreshToken[]
  passwordResets   PasswordReset[]
  emailVerifications EmailVerification[]
}

enum UserRole {
  FARMER
  ADVISOR
  ADMIN
  SUPPORT
}

model RefreshToken @map("refresh_tokens") {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset @map("password_resets") {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
}

model EmailVerification @map("email_verifications") {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  verifiedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Farm Models
model Farm @map("farms") {
  id           String     @id @default(cuid())
  name         String
  description  String?
  totalAcres   Decimal    @db.Decimal(10, 2)
  farmType     FarmType
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Location
  address     String
  city        String
  state       String
  country     String
  zipCode     String
  latitude    Decimal    @db.Decimal(10, 8)
  longitude   Decimal    @db.Decimal(11, 8)

  // Certifications
  certifications String[]

  // Relations
  members      FarmMember[]
  crops        Crop[]
  transactions Transaction[]
  budgets      Budget[]
}

enum FarmType {
  CROP
  LIVESTOCK
  MIXED
  DAIRY
  POULTRY
  AQUACULTURE
}

model FarmMember @map("farm_members") {
  id       String           @id @default(cuid())
  farmId   String
  userId   String
  role     FarmMemberRole   @default(MEMBER)
  joinedAt DateTime         @default(now())
  leftAt   DateTime?

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @unique([farmId, userId])
}

enum FarmMemberRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

model Crop @map("crops") {
  id                  String    @id @default(cuid())
  farmId              String
  name                String
  variety             String?
  acres               Decimal   @db.Decimal(10, 2)
  plantingDate        DateTime?
  expectedHarvestDate DateTime?
  actualHarvestDate   DateTime?
  status              CropStatus @default(PLANNED)
  seasonYear          Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Yield data
  expectedYield Decimal? @db.Decimal(10, 2)
  actualYield   Decimal? @db.Decimal(10, 2)
  yieldUnit     String?  // bushels, tons, etc.

  farm         Farm          @relation(fields: [farmId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

enum CropStatus {
  PLANNED
  PLANTED
  GROWING
  HARVESTED
  SOLD
}

// Financial Models
model TransactionCategory @map("transaction_categories") {
  id           String          @id @default(cuid())
  name         String
  description  String?
  categoryType TransactionType
  parentId     String?
  isActive     Boolean         @default(true)
  color        String?
  icon         String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  parent       TransactionCategory? @relation(\"CategoryHierarchy\", fields: [parentId], references: [id])
  children     TransactionCategory[] @relation(\"CategoryHierarchy\")
  transactions Transaction[]
  budgetCategories BudgetCategory[]
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Transaction @map("transactions") {
  id              String          @id @default(cuid())
  farmId          String
  categoryId      String
  cropId          String?
  userId          String
  amount          Decimal         @db.Decimal(12, 2)
  transactionType TransactionType
  description     String
  transactionDate DateTime
  seasonYear      Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Payment details
  paymentMethod   PaymentMethod?
  vendorName      String?
  referenceNumber String?
  receiptUrl      String?
  invoiceNumber   String?

  // Metadata
  tags            String[]
  notes           String?

  farm     Farm                @relation(fields: [farmId], references: [id], onDelete: Cascade)
  category TransactionCategory @relation(fields: [categoryId], references: [id])
  crop     Crop?               @relation(fields: [cropId], references: [id])
  user     User                @relation(fields: [userId], references: [id])

  @index([farmId, transactionDate])
  @index([categoryId])
  @index([transactionDate])
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  DIGITAL_PAYMENT
}

model Budget @map("budgets") {
  id           String       @id @default(cuid())
  farmId       String
  userId       String
  name         String
  description  String?
  seasonYear   Int
  totalBudget  Decimal      @db.Decimal(12, 2)
  status       BudgetStatus @default(DRAFT)
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  farm       Farm             @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id])
  categories BudgetCategory[]
}

enum BudgetStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model BudgetCategory @map("budget_categories") {
  id              String  @id @default(cuid())
  budgetId        String
  categoryId      String
  allocatedAmount Decimal @db.Decimal(12, 2)
  spentAmount     Decimal @db.Decimal(12, 2) @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  budget   Budget              @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category TransactionCategory @relation(fields: [categoryId], references: [id])

  @unique([budgetId, categoryId])
}

// Analytics and Reporting Models
model FinancialSummary @map("financial_summaries") {
  id            String   @id @default(cuid())
  farmId        String
  seasonYear    Int
  totalRevenue  Decimal  @db.Decimal(12, 2)
  totalExpenses Decimal  @db.Decimal(12, 2)
  netProfit     Decimal  @db.Decimal(12, 2)
  profitMargin  Decimal  @db.Decimal(5, 2)
  calculatedAt  DateTime @default(now())
  createdAt     DateTime @default(now())

  @unique([farmId, seasonYear])
}

model CropProfitability @map("crop_profitability") {
  id              String  @id @default(cuid())
  farmId          String
  cropId          String
  seasonYear      Int
  totalRevenue    Decimal @db.Decimal(12, 2)
  totalExpenses   Decimal @db.Decimal(12, 2)
  netProfit       Decimal @db.Decimal(12, 2)
  profitPerAcre   Decimal @db.Decimal(12, 2)
  yieldPerAcre    Decimal? @db.Decimal(10, 2)
  profitMargin    Decimal @db.Decimal(5, 2)
  calculatedAt    DateTime @default(now())
  createdAt       DateTime @default(now())

  @unique([farmId, cropId, seasonYear])
}

// System Models
model AuditLog @map("audit_logs") {
  id          String    @id @default(cuid())
  userId      String?
  action      String
  entityType  String
  entityId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  @index([userId])
  @index([entityType, entityId])
  @index([createdAt])
}

model SystemSettings @map("system_settings") {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}