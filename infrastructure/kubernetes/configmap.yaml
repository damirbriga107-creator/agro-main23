apiVersion: v1
kind: ConfigMap
metadata:
  name: daorsagro-config
  namespace: daorsagro
data:
  NODE_ENV: "production"
  APP_NAME: "DaorsAgro"
  APP_VERSION: "1.0.0"
  
  # Database configurations
  POSTGRES_DB: "daorsagro"
  POSTGRES_USER: "postgres"
  MONGO_INITDB_DATABASE: "daorsagro"
  MONGO_INITDB_ROOT_USERNAME: "mongo"
  
  # Service URLs
  AUTH_SERVICE_URL: "http://auth-service:3001"
  FINANCIAL_SERVICE_URL: "http://financial-service:3002"
  SUBSIDY_SERVICE_URL: "http://subsidy-service:3003"
  INSURANCE_SERVICE_URL: "http://insurance-service:3004"
  ANALYTICS_SERVICE_URL: "http://analytics-service:3005"
  DOCUMENT_SERVICE_URL: "http://document-service:3006"
  NOTIFICATION_SERVICE_URL: "http://notification-service:3007"
  IOT_SERVICE_URL: "http://iot-service:3008"
  
  # External service URLs
  REDIS_URL: "redis://redis-service:6379"
  KAFKA_BROKERS: "kafka-service:9092"
  ELASTICSEARCH_URL: "http://elasticsearch-service:9200"
  CLICKHOUSE_URL: "http://clickhouse-service:8123"
  
  # Monitoring
  PROMETHEUS_URL: "http://prometheus-service:9090"
  GRAFANA_URL: "http://grafana-service:3000"
  
  # Logging
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  
  # Performance
  NODE_OPTIONS: "--max-old-space-size=2048"
  UV_THREADPOOL_SIZE: "16"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: daorsagro
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;

        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

        # Upstream for API Gateway
        upstream api_gateway {
            least_conn;
            server api-gateway-service:3000 max_fails=3 fail_timeout=30s;
        }

        # Main server block
        server {
            listen 80;
            server_name _;

            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

            # API routes
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://api_gateway;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            # Auth routes with stricter rate limiting
            location /api/auth/ {
                limit_req zone=auth burst=10 nodelay;
                proxy_pass http://api_gateway;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            # Static files (if serving frontend)
            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
                try_files $uri $uri/ /index.html;
                
                # Cache static assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }
            }
        }
    }