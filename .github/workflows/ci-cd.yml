name: CI/CD Pipeline for DaorsAgro

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install and test backend services
        run: |
          # Assuming each service has its own package.json; run tests per service
          cd backend/api-gateway && npm ci && npm test && npm run lint
          cd backend/services/auth-service && npm ci && npm test && npm run lint
          cd backend/services/financial-service && npm ci && npm test && npm run lint
          cd backend/services/document-service && npm ci && npm test && npm run lint
          cd backend/services/analytics-service && npm ci && npm test && npm run lint
          cd backend/services/insurance-service && npm ci && npm test && npm run lint
          cd backend/services/iot-service && npm ci && npm test && npm run lint
          cd backend/services/notification-service && npm ci && npm test && npm run lint
      - name: Install and test frontend
        run: |
          cd frontend-app && npm ci && npm test && npm run lint
      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Build and tag Docker images
        run: |
          TAG=${{ github.sha }}
          # Build API Gateway
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/api-gateway:$TAG backend/api-gateway/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/api-gateway:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/api-gateway:latest
          # Build Auth Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/auth-service:$TAG backend/services/auth-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/auth-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/auth-service:latest
          # Build Financial Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/financial-service:$TAG backend/services/financial-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/financial-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/financial-service:latest
          # Build Document Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/document-service:$TAG backend/services/document-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/document-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/document-service:latest
          # Build Analytics Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/analytics-service:$TAG backend/services/analytics-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/analytics-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/analytics-service:latest
          # Build Insurance Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/insurance-service:$TAG backend/services/insurance-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/insurance-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/insurance-service:latest
          # Build IoT Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/iot-service:$TAG backend/services/iot-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/iot-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/iot-service:latest
          # Build Notification Service
          docker build -t ghcr.io/${{ github.repository_owner }}/daorsagro/platform/notification-service:$TAG backend/services/notification-service/
          docker tag ghcr.io/${{ github.repository_owner }}/daorsagro/platform/notification-service:$TAG ghcr.io/${{ github.repository_owner }}/daorsagro/platform/notification-service:latest
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push images
        run: |
          TAG=${{ github.sha }}
          # Push API Gateway
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/api-gateway:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/api-gateway:latest
          # Push Auth Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/auth-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/auth-service:latest
          # Push Financial Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/financial-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/financial-service:latest
          # Push Document Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/document-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/document-service:latest
          # Push Analytics Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/analytics-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/analytics-service:latest
          # Push Insurance Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/insurance-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/insurance-service:latest
          # Push IoT Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/iot-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/iot-service:latest
          # Push Notification Service
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/notification-service:$TAG
          docker push ghcr.io/${{ github.repository_owner }}/daorsagro/platform/notification-service:latest

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region eu-west-1 --name daorsagro-staging
      - name: Deploy to staging
        run: helm upgrade --install daorsagro ./infrastructure/helm/daorsagro --namespace daorsagro --create-namespace --set environment=staging --set image.tag=${{ github.sha }}

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region eu-west-1 --name daorsagro-production
      - name: Deploy to production
        run: helm upgrade --install daorsagro ./infrastructure/helm/daorsagro --namespace daorsagro-prod --create-namespace --set environment=production --set image.tag=${{ github.sha }}
      - name: Notify Webhook
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-Type: application/json' \
              -d "{\"text\":\"Production deployment completed for commit ${{ github.sha }} in repo ${{ github.repository }}\"}" \
              "$WEBHOOK_URL"
          else
            echo "No webhook URL provided, skipping notification."
          fi