name: DaorsAgro CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format -- --check

    - name: Run TypeScript check
      run: npm run type-check

    - name: Security audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: daorsagro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: mongo123
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/daorsagro_test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://mongo:mongo123@localhost:27017/daorsagro_test?authSource=admin

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/daorsagro_test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://mongo:mongo123@localhost:27017/daorsagro_test?authSource=admin

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  # Build and Push Docker Images with Docker Build Cloud
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service:
          - api-gateway
          - auth-service
          - financial-service
          - subsidy-service
          - insurance-service
          - analytics-service
          - document-service
          - notification-service
          - iot-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx with Build Cloud
      uses: docker/setup-buildx-action@v3
      with:
        version: latest
        driver: cloud
        endpoint: ${{ secrets.DOCKER_BUILD_CLOUD_ENDPOINT }}
        install: true

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub for Build Cloud
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image with Build Cloud
      uses: docker/build-push-action@v5
      with:
        context: .
        file: backend/${{ matrix.service == 'api-gateway' && 'api-gateway' || 'services/' }}${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Enhanced caching with Build Cloud
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:buildcache
          type=gha
        cache-to: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:buildcache,mode=max
          type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        # Build Cloud specific optimizations
        provenance: mode=max
        sbom: true
        # Use dedicated build machines for faster builds
        builder: ${{ steps.buildx.outputs.name }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: daorsagro/.*:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}|g" infrastructure/kubernetes/api-gateway-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/configmap.yaml
        kubectl apply -f infrastructure/kubernetes/secrets.yaml
        kubectl apply -f infrastructure/kubernetes/api-gateway-deployment.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/api-gateway -n daorsagro --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Get service URL
        STAGING_URL=$(kubectl get ingress api-gateway-ingress -n daorsagro -o jsonpath='{.spec.rules[0].host}')
        
        # Run basic health checks
        curl -f https://$STAGING_URL/health || exit 1
        curl -f https://$STAGING_URL/api/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: daorsagro/.*:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}|g" infrastructure/kubernetes/api-gateway-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/configmap.yaml
        kubectl apply -f infrastructure/kubernetes/secrets.yaml
        kubectl apply -f infrastructure/kubernetes/api-gateway-deployment.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/api-gateway -n daorsagro --timeout=600s

    - name: Run production health checks
      run: |
        # Wait for service to be ready
        sleep 60
        
        # Get service URL
        PROD_URL=$(kubectl get ingress api-gateway-ingress -n daorsagro -o jsonpath='{.spec.rules[0].host}')
        
        # Run comprehensive health checks
        curl -f https://$PROD_URL/health || exit 1
        curl -f https://$PROD_URL/api/health || exit 1
        
        # Check all microservices
        for service in auth financial subsidy insurance analytics document notification iot; do
          curl -f https://$PROD_URL/api/$service/health || exit 1
        done

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 DaorsAgro successfully deployed to production!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment: production
    
    steps:
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/api-gateway -n daorsagro
        kubectl rollout status deployment/api-gateway -n daorsagro --timeout=300s

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "⚠️ DaorsAgro deployment failed and was rolled back!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}