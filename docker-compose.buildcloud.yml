version: '3.8'

# Docker Compose configuration optimized for Docker Build Cloud
# This file demonstrates how to leverage Build Cloud features locally

services:
  # Databases (unchanged for local development)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: daorsagro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: auth_db,financial_db,farm_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - daorsagro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo123
      MONGO_INITDB_DATABASE: daorsagro
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - daorsagro-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - daorsagro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway with Build Cloud optimizations
  api-gateway:
    build:
      context: .
      dockerfile: backend/api-gateway/Dockerfile
      # Build Cloud cache configuration
      cache_from:
        - ghcr.io/daorsagro/platform/api-gateway:buildcache
      cache_to:
        - ghcr.io/daorsagro/platform/api-gateway:buildcache
      # Build arguments for optimization
      args:
        NODE_ENV: development
        BUILD_TYPE: development
      # Target specific stage for development
      target: production
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      JWT_SECRET: your-jwt-secret-key-change-in-production
      JWT_REFRESH_SECRET: your-refresh-secret-key-change-in-production
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
      FINANCIAL_SERVICE_URL: http://financial-service:3002
      SUBSIDY_SERVICE_URL: http://subsidy-service:3003
      INSURANCE_SERVICE_URL: http://insurance-service:3004
      ANALYTICS_SERVICE_URL: http://analytics-service:3005
      DOCUMENT_SERVICE_URL: http://document-service:3006
      NOTIFICATION_SERVICE_URL: http://notification-service:3007
      IOT_SERVICE_URL: http://iot-service:3008
    depends_on:
      - redis
      - postgres
      - mongodb
    networks:
      - daorsagro-network
    # Development volume mounts (commented out for production builds)
    # volumes:
    #   - ./backend/api-gateway:/app
    #   - /app/node_modules

  # Microservices with Build Cloud optimizations
  auth-service:
    build:
      context: .
      dockerfile: backend/services/auth-service/Dockerfile
      cache_from:
        - ghcr.io/daorsagro/platform/auth-service:buildcache
      cache_to:
        - ghcr.io/daorsagro/platform/auth-service:buildcache
      args:
        NODE_ENV: development
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/auth_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-jwt-secret-key-change-in-production
      JWT_REFRESH_SECRET: your-refresh-secret-key-change-in-production
    depends_on:
      - postgres
      - redis
    networks:
      - daorsagro-network

  financial-service:
    build:
      context: .
      dockerfile: backend/services/financial-service/Dockerfile
      cache_from:
        - ghcr.io/daorsagro/platform/financial-service:buildcache
      cache_to:
        - ghcr.io/daorsagro/platform/financial-service:buildcache
      args:
        NODE_ENV: development
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/financial_db
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - kafka
      - elasticsearch
    networks:
      - daorsagro-network

  # Frontend with Build Cloud optimizations
  frontend-app:
    build:
      context: .
      dockerfile: frontend-app/Dockerfile
      cache_from:
        - ghcr.io/daorsagro/platform/frontend-app:buildcache
      cache_to:
        - ghcr.io/daorsagro/platform/frontend-app:buildcache
      args:
        NODE_ENV: development
        VITE_API_URL: http://localhost:3000
        VITE_APP_NAME: DaorsAgro
        VITE_APP_VERSION: 1.0.0
      # Use development target for local development
      target: development
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000
      VITE_APP_NAME: DaorsAgro
      VITE_APP_VERSION: 1.0.0
    depends_on:
      - api-gateway
    networks:
      - daorsagro-network
    volumes:
      - ./frontend-app:/app/frontend-app
      - /app/node_modules

  # Supporting services (minimal for development)
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - daorsagro-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - daorsagro-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - daorsagro-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:

networks:
  daorsagro-network:
    driver: bridge

# Build Cloud specific configuration
x-build-cloud-config: &build-cloud-config
  # Common build configuration for all services
  platforms:
    - linux/amd64
    - linux/arm64
  cache_from:
    - type=registry
    - type=gha
  cache_to:
    - type=registry,mode=max
    - type=gha,mode=max
  provenance: mode=max
  sbom: true