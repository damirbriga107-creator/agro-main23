version: '3.8'

# Production Docker Compose configuration for cloud deployment
# Optimized for performance, security, and scalability

services:
  # Reverse Proxy / Load Balancer
  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --accesslog=true
      - --metrics.prometheus=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - traefik-public
      - daorsagro-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    restart: unless-stopped
    environment:
      - TRAEFIK_API_DASHBOARD=true

  # Production Databases
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-daorsagro}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: auth_db,financial_db,farm_db,analytics_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
      - ./infrastructure/backup/postgres:/backup
    networks:
      - daorsagro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-mongo}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-daorsagro}
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./infrastructure/backup/mongodb:/backup
    networks:
      - daorsagro-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - daorsagro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    depends_on:
      - zookeeper
    networks:
      - daorsagro-network
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - daorsagro-network
    restart: unless-stopped

  # Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - daorsagro-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # API Gateway
  api-gateway:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/api-gateway:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/api-gateway/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-daorsagro}
      # Service URLs
      AUTH_SERVICE_URL: http://auth-service:3001
      FINANCIAL_SERVICE_URL: http://financial-service:3002
      SUBSIDY_SERVICE_URL: http://subsidy-service:3003
      INSURANCE_SERVICE_URL: http://insurance-service:3004
      ANALYTICS_SERVICE_URL: http://analytics-service:3005
      DOCUMENT_SERVICE_URL: http://document-service:3006
      NOTIFICATION_SERVICE_URL: http://notification-service:3007
      IOT_SERVICE_URL: http://iot-service:3008
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - daorsagro-network
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.api.tls.certresolver=letsencrypt
      - traefik.http.services.api.loadbalancer.server.port=3000
      - traefik.http.routers.api.middlewares=api-ratelimit
      - traefik.http.middlewares.api-ratelimit.ratelimit.burst=100
      - traefik.http.middlewares.api-ratelimit.ratelimit.average=50
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Microservices
  auth-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/auth-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/auth-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/auth_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      EMAIL_SERVICE_URL: ${EMAIL_SERVICE_URL}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  financial-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/financial-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/financial-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/financial_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      ELASTICSEARCH_URL: http://elasticsearch:9200
      PAYMENT_GATEWAY_URL: ${PAYMENT_GATEWAY_URL}
      PAYMENT_API_KEY: ${PAYMENT_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
      - elasticsearch
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  subsidy-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/subsidy-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/subsidy-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/farm_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      GOVERNMENT_API_URL: ${GOVERNMENT_API_URL}
      GOVERNMENT_API_KEY: ${GOVERNMENT_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  insurance-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/insurance-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/insurance-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/farm_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      INSURANCE_API_URL: ${INSURANCE_API_URL}
      INSURANCE_API_KEY: ${INSURANCE_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  analytics-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/analytics-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/analytics-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/analytics_db
      MONGODB_URL: mongodb://${MONGO_USER:-mongo}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB:-daorsagro}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - postgres
      - mongodb
      - redis
      - kafka
      - elasticsearch
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  document-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/document-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/document-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3006
      MONGODB_URL: mongodb://${MONGO_USER:-mongo}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB:-daorsagro}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
    depends_on:
      - mongodb
      - redis
    networks:
      - daorsagro-network
    volumes:
      - document_storage:/app/uploads
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  notification-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/notification-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/notification-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3007
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      EMAIL_SERVICE_URL: ${EMAIL_SERVICE_URL}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
      SMS_SERVICE_URL: ${SMS_SERVICE_URL}
      SMS_API_KEY: ${SMS_API_KEY}
      PUSH_SERVICE_URL: ${PUSH_SERVICE_URL}
      PUSH_API_KEY: ${PUSH_API_KEY}
    depends_on:
      - redis
      - kafka
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  iot-service:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/iot-service:${TAG:-latest}
    build:
      context: .
      dockerfile: backend/services/iot-service/Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3008
      MONGODB_URL: mongodb://${MONGO_USER:-mongo}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB:-daorsagro}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      MQTT_BROKER_URL: ${MQTT_BROKER_URL}
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - daorsagro-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Frontend Application
  frontend-app:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-daorsagro/platform}/frontend-app:${TAG:-latest}
    build:
      context: .
      dockerfile: frontend-app/Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_API_URL: https://api.${DOMAIN}
        VITE_APP_NAME: DaorsAgro
        VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    networks:
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
      - traefik.http.routers.frontend.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=80
      - traefik.http.routers.frontend.middlewares=frontend-compress
      - traefik.http.middlewares.frontend-compress.compress=true
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - daorsagro-network
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
      - traefik.http.routers.prometheus.tls.certresolver=letsencrypt
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - daorsagro-network
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  document_storage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_letsencrypt:
    driver: local

networks:
  daorsagro-network:
    driver: bridge
    internal: true
  traefik-public:
    driver: bridge